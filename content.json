{"meta":{"title":"寒武没有纪","subtitle":null,"description":null,"author":"Laravel Shao","url":"http://laravelshao.com"},"pages":[{"title":"分类","date":"2018-01-08T02:18:24.000Z","updated":"2018-01-08T02:19:14.858Z","comments":false,"path":"categories/index.html","permalink":"http://laravelshao.com/categories/index.html","excerpt":"","text":""},{"title":"关于","date":"2018-01-07T09:51:32.000Z","updated":"2018-01-08T02:32:36.934Z","comments":false,"path":"about/index.html","permalink":"http://laravelshao.com/about/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2018-01-28T08:55:54.042Z","updated":"2018-01-28T08:55:54.042Z","comments":true,"path":"links/index.html","permalink":"http://laravelshao.com/links/index.html","excerpt":"","text":""},{"title":"标签","date":"2018-01-07T09:38:49.000Z","updated":"2018-01-08T02:16:08.588Z","comments":false,"path":"tags/index.html","permalink":"http://laravelshao.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Docker Maven插件本地构建镜像发布至远程服务器","slug":"docker-maven-plugin-deploy-remote-server","date":"2018-01-28T09:39:21.000Z","updated":"2018-01-28T10:21:47.418Z","comments":true,"path":"2018/01/28/docker-maven-plugin-deploy-remote-server/","link":"","permalink":"http://laravelshao.com/2018/01/28/docker-maven-plugin-deploy-remote-server/","excerpt":"","text":"环境使用阿里云ECS服务器及Ubuntu 16.04进行测试 Ubuntu 16.04安装Docker1.安装步骤 12345678910# step 1: 安装必要的一些系统工具，添加apt支持https的URLs(如不存在/usr/lib/apt/methods/https这个文件，先安装apt-transport-https包)sudo apt-get updatesudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common# step 2: 安装GPG证书curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -# Step 3: 写入软件源信息sudo add-apt-repository &quot;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&quot;# Step 4: 更新并安装Docker-CEsudo apt-get -y updatesudo apt-get -y install docker-ce 2.安装后查看版本信息1docker -v 3.可以从镜像仓库拉取一个测试镜像1docker pull hello-world 4.查询可用镜像1docker images 5.启动 docker 服务1service docker start 6.启动测试镜像1docker run hello-world 创建测试工程1.使用 IDEA 生成一个基础的 Spring Boot 工程 2.在 pom 文件中添加 docker-maven-plugin 插件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.laravelshao.springboot&lt;/groupId&gt; &lt;artifactId&gt;deploy-docker&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;name&gt;deploy-docker&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;1.5.9.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;!--docker maven 插件--&gt; &lt;plugin&gt; &lt;groupId&gt;com.spotify&lt;/groupId&gt; &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.0.0&lt;/version&gt; &lt;configuration&gt; &lt;imageName&gt;micro-deploy-docker&lt;/imageName&gt; &lt;!--注意 修改成远程服务器地址--&gt; &lt;dockerHost&gt; http://X.X.X.X:2375&lt;/dockerHost&gt; &lt;dockerDirectory&gt;docker&lt;/dockerDirectory&gt; &lt;resources&gt; &lt;resource&gt; &lt;targetPath&gt;/&lt;/targetPath&gt; &lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt; &lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;/include&gt; &lt;/resource&gt; &lt;/resources&gt; &lt;/configuration&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt; &lt;artifactId&gt;httpclient&lt;/artifactId&gt; &lt;version&gt;4.4&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; 3.在工程根目录下添加 docker 文件夹并添加 Dockerfile 文件123456789FROM frolvlad/alpine-oraclejdk8:slimVOLUME /opt/commonADD deploy-docker-0.0.1-SNAPSHOT.jar app.jarENTRYPOINT [\"java\",\"-Djava.security.egd=file:/dev/./urandom\",\"-jar\",\"/app.jar\"]EXPOSE 8080 4.提供一个测试接口 12345678@RestControllerpublic class DemoController &#123; @RequestMapping(\"/hello\") public String hello()&#123; return \"hello world docker\"; &#125;&#125; 5.构建镜像并发布到远程服务器1mvn clean package docker:build 6.查看相关博客后发现远程服务器必须开启 docker 远程 api 解决方法： ①在 /etc/systemd/system 目录下新建目录 docker.service.d，并新建文件 http-proxy.conf，添加以下内容保存123[Service]ExecStart=ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock ②重新载入配置1systemctl daemon-reload ③重启 docker 服务1service docker restart ④查看 docker 进程，发现配置已经更新1ps -ef | grep docker 7.再次尝试构建镜像发布到远程服务器，还是报连接失败1mvn clean package docker:build 解决方法： 实在不知道那还有问题，就尝试在阿里云ECS管理控制台有没有相关设置，突然看到有一个安全组配置，添加一个安全组规则 8.第三次尝试构建镜像发布到远程服务器，总算推送成功1mvn clean package docker:build 9.查询可用镜像，存在刚才构建的镜像1docker images 10.启动当前镜像 docker run -p 8080:8080 micro-deploy-docker:latest 11.请求测试接口 http://X.X.X.X:8080/hello ，发现无法访问，这时需要在阿里云的安全组中开放8080端口供服务请求使用 添加规则之后再次请求，总算成功了，不容易。","categories":[{"name":"Docker","slug":"Docker","permalink":"http://laravelshao.com/categories/Docker/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"http://laravelshao.com/tags/Docker/"},{"name":"Image","slug":"Image","permalink":"http://laravelshao.com/tags/Image/"}]},{"title":"Spring Cloud学习：08Docker部署Spring Cloud项目","slug":"spring-cloud-learning-08-deploy-docker","date":"2018-01-16T08:53:12.000Z","updated":"2018-01-16T09:35:24.677Z","comments":true,"path":"2018/01/16/spring-cloud-learning-08-deploy-docker/","link":"","permalink":"http://laravelshao.com/2018/01/16/spring-cloud-learning-08-deploy-docker/","excerpt":"","text":"修改工程使用练习1的工程进行修改 1.修改 eureka-server 模块，在 pom.xml 文件中添加 docker-maven-plugin 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.laravelshao.springcloud&lt;/groupId&gt; &lt;artifactId&gt;one-service&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;name&gt;one-service&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;1.5.6.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt; &lt;!--docker 镜像前缀--&gt; &lt;docker.image.prefix&gt;laravelshao&lt;/docker.image.prefix&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;spring-cloud.version&gt;Dalston.SR3&lt;/spring-cloud.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/dependencyManagement&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;!--docker maven插件--&gt; &lt;plugin&gt; &lt;groupId&gt;com.spotify&lt;/groupId&gt; &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.0.0&lt;/version&gt; &lt;configuration&gt; &lt;imageName&gt;$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;&lt;/imageName&gt; &lt;dockerDirectory&gt;docker&lt;/dockerDirectory&gt; &lt;!--注意 修改成远程服务器地址--&gt; &lt;dockerHost&gt;http://X:X:X:X:2375&lt;/dockerHost&gt; &lt;resources&gt; &lt;resource&gt; &lt;targetPath&gt;/&lt;/targetPath&gt; &lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt; &lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;/include&gt; &lt;/resource&gt; &lt;/resources&gt; &lt;/configuration&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt; &lt;artifactId&gt;httpclient&lt;/artifactId&gt; &lt;version&gt;4.4&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; 2.修改 yml 配置文件123456789server: port: 8761 # eureka默认端口：8761eureka: instance: prefer-ip-address: true client: register-with-eureka: false # 是否注册到eureka fetch-registry: false # 是否从eureka获取注册信息 3.在 eureka-server 模块下面新建 docker 文件夹，新建 Dockerfile 文件12345678910FROM frolvlad/alpine-oraclejdk8:slimVOLUME /opt/commonADD eureka-server-0.0.1-SNAPSHOT.jar app.jar#RUN bash -c 'touch /app.jar'ENTRYPOINT [\"java\",\"-Djava.security.egd=file:/dev/./urandom\",\"-jar\",\"/app.jar\"]EXPOSE 8761 4.执行构建命令1mvn clean package docker:build 5.同样修改 one-service 模块，添加 docker-maven-plugin 插件，修改配置文件，添加 Dockerfile 文件，并构建镜像 yml配置文件 1234567891011server: port: 8762eureka: client: serviceUrl: defaultZone: http://eureka-server:8761/eureka/ #host需要修改为镜像名称spring: application: name: one-service #指明应用名称（服务与服务相互调用根据name属性） Dockerfile文件123456789FROM frolvlad/alpine-oraclejdk8:slimVOLUME /opt/commonADD one-service-0.0.1-SNAPSHOT.jar app.jarENTRYPOINT [\"java\",\"-Djava.security.egd=file:/dev/./urandom\",\"-jar\",\"/app.jar\"]EXPOSE 8762 6.在远程服务器的 docker 仓库可以看见构建的两个镜像 7.启动镜像12docker run -p 8761:8761 -t laravelshao/eureka-serverdocker run -p 8762:8762 -t laravelshao/one-service 发现 one-service 服务无法注册 解决方法：在启动服务注册中心镜像时添加 name 参数，启动 one-service 时添加 link 参数指向服务注册中心12docker run --name eureka-server -p 8761:8761 -t laravelshao/eureka-serverdocker run --link eureka-server:eureka-server -p 8762:8762 -t laravelshao/one-service 服务注册中心存在 one-service 服务，说明注册成功 请求测试地址，返回测试信息 本文源码下载地址：https://github.com/laravelshao/spring-cloud-learning/tree/master/setion08-deploy-docker 参考资料史上最简单的SpringCloud教程 https://segmentfault.com/a/1190000010313412 http://www.cnblogs.com/cocoat/p/7473785.html","categories":[{"name":"Spring Cloud","slug":"Spring-Cloud","permalink":"http://laravelshao.com/categories/Spring-Cloud/"}],"tags":[{"name":"Spring","slug":"Spring","permalink":"http://laravelshao.com/tags/Spring/"},{"name":"Spring Cloud","slug":"Spring-Cloud","permalink":"http://laravelshao.com/tags/Spring-Cloud/"},{"name":"微服务","slug":"微服务","permalink":"http://laravelshao.com/tags/微服务/"},{"name":"Docker","slug":"Docker","permalink":"http://laravelshao.com/tags/Docker/"},{"name":"容器","slug":"容器","permalink":"http://laravelshao.com/tags/容器/"}]},{"title":"Spring Cloud学习：07消息总线（Spring Cloud Bus）","slug":"spring-cloud-learning-07-bus","date":"2018-01-16T02:09:29.000Z","updated":"2018-01-16T07:13:12.981Z","comments":true,"path":"2018/01/16/spring-cloud-learning-07-bus/","link":"","permalink":"http://laravelshao.com/2018/01/16/spring-cloud-learning-07-bus/","excerpt":"","text":"消息总线介绍消息总线是一种通信工具，可以在机器之间互相传输消息、文件等。消息总线扮演着一种消息路由的角色，拥有一套完备的路由机制来决定消息传输方向。发送端只需要向消息总线发出消息而不用管消息被如何转发。Spring Cloud Bus 通过轻量消息代理连接各个分布的节点。管理和传播所有分布式项目中的消息，本质是利用了 MQ 的广播机制在分布式的系统中传播消息，目前常用的有 Kafka 和 RabbitMQ。 改造配置客户端（Config Client）1.基于上次工程进行改造，在 config-client 的 pom 文件中添加 spring-cloud-starter-bus-amqp 依赖：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.laravelshao.springcloud&lt;/groupId&gt; &lt;artifactId&gt;config-client&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;name&gt;config-client&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;1.5.8.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;spring-cloud.version&gt;Dalston.SR4&lt;/spring-cloud.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-bus-amqp&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/dependencyManagement&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; 2.在配置文件 bootstrap.yml 中添加 rabbitmq 相关配置信息：123456789101112131415161718192021222324252627server: port: 8881management: security: enabled: false # 设置是否启用安全限制spring: application: name: config-client cloud: config: uri: http://localhost:8888/ # 配置服务中心地址 label: master # 远程仓库分支 profile: dev # 指定环境 discovery: enabled: true # 从配置中心读取文件 service-id: config-server # 配置中心服务id # rabbitmq配置 rabbitmq: host: localhost port: 5672# username:# password:eureka: client: serviceUrl: defaultZone: http://localhost:8889/eureka/ # 配置eureka服务器地址 management.security.enabled：设置是否启用安全限制 注意事项：需要配置 management.security.enabled: false 不启用安全限制，否则在请求刷新 bus 时会显示：1234567&#123; &quot;timestamp&quot;: 1512118086064, &quot;status&quot;: 401, &quot;error&quot;: &quot;Unauthorized&quot;, &quot;message&quot;: &quot;Full authentication is required to access this resource.&quot;, &quot;path&quot;: &quot;/bus/refresh&quot;&#125; 后台也会提示添加安全策略或者设置不启用安全限制。 Full authentication is required to access actuator endpoints. Consider adding Spring Security or set ‘management.security.enabled’ to false. 3.在启动类添加@RefreshScope 注解1234567891011121314151617@SpringBootApplication@RestController@RefreshScopepublic class ConfigClientApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(ConfigClientApplication.class, args); &#125; @Value(\"$&#123;hello&#125;\") String hello; @RequestMapping(\"/hi\") public String hi() &#123; return hello; &#125;&#125; 4.依次启动 eureka-server、config-server、config-client（启动两个实例，端口为8881、8882） 请求 http://localhost:8881/hi 或 http://localhost:8882/hi ，返回信息：1hello config server 5.修改配置仓库中 config-client-dev.properties 中 hello 对应的值为 hello config server change，使用 POST 请求 http://localhost:8881/bus/refresh ，会发现 config-client 重新读取了配置文件 再次请求 http://localhost:8881/hi 或 http://localhost:8882/hi ，返回更新后的信息： hello config server change 本文源码下载地址：https://github.com/laravelshao/spring-cloud-learning/tree/master/setion07-bus","categories":[{"name":"Spring Cloud","slug":"Spring-Cloud","permalink":"http://laravelshao.com/categories/Spring-Cloud/"}],"tags":[{"name":"Spring","slug":"Spring","permalink":"http://laravelshao.com/tags/Spring/"},{"name":"Spring Cloud","slug":"Spring-Cloud","permalink":"http://laravelshao.com/tags/Spring-Cloud/"},{"name":"微服务","slug":"微服务","permalink":"http://laravelshao.com/tags/微服务/"},{"name":"消息总线","slug":"消息总线","permalink":"http://laravelshao.com/tags/消息总线/"}]},{"title":"Spring Cloud学习：06高可用分布式配置中心（Config Cluster）","slug":"spring-cloud-learning-06-config-cluster","date":"2018-01-12T09:50:07.000Z","updated":"2018-01-16T09:19:35.872Z","comments":true,"path":"2018/01/12/spring-cloud-learning-06-config-cluster/","link":"","permalink":"http://laravelshao.com/2018/01/12/spring-cloud-learning-06-config-cluster/","excerpt":"","text":"配置中心从远程 git 仓库读取配置信息，配置客户端从配置中心读取信息，当服务实例数变多时，有必要进行集群部署，将配置中心也作为一个微服务，注册到服务注册中心，从而达到高可用的目的。 创建注册中心（Eureka Server）1.基于之前工程，创建新模块 eureka-server，用作服务注册中心，选择 Spring Initializr-&gt;Cloud Discovery-&gt; Eureka Server，并添加以下依赖：123456789101112131415&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-eureka-server&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt;&lt;/dependencies&gt; 2.添加服务注册中心配置：123456789101112server: port: 8889eureka: instance: hostname: localhost client: register-with-eureka: false # 是否注册到eureka fetch-registry: false # 是否从eureka获取注册信息 serviceUrl: # eureka服务器地址（注意：地址最后面的 /eureka/ 是固定值） defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/ 3.启动类添加@EnableEurekaServer 注解12345678@EnableEurekaServer@SpringBootApplicationpublic class EurekaServerApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(EurekaServerApplication.class, args); &#125;&#125; 改造配置中心（Config Server）1.修改 config-server 模块，pom 文件添加 spring-cloud-starter-eureka 依赖：123456789101112131415&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-config-server&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt; &lt;/dependency&gt;&lt;/dependencies&gt; 2.配置文件添加服务注册中心地址：http://localhost:8889/eureka/ 123456789101112131415161718192021server: port: 8888spring: application: name: config-server # 配置中心 cloud: config: server: git: uri: https://github.com/laravelshao/spring-cloud-config-repo # cloud配置仓库地址 search-paths: spring-cloud-learning # 配置仓库路径 username: # 公开仓库可不填写 password: # 公开仓库可不填写 label: master # 配置仓库分支eureka: client: service-url: defaultZone: http://localhost:8889/eureka/ # 配置eureka服务器地址 3.启动类添加@EnableEurekaClient 注解123456789@SpringBootApplication@EnableConfigServer@EnableEurekaClientpublic class ConfigServerApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(ConfigServerApplication.class, args); &#125;&#125; 改造配置客户端（Config Client）1.修改 config-client 模块，pom 文件添加 spring-cloud-starter-eureka 依赖：12345678910111213141516171819&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt; &lt;/dependency&gt;&lt;/dependencies&gt; 2.配置文件 bootstrap.yml 中添加以下配置： spring.cloud.config.discovery.enabled：配置是否从配置中心读取文件 spring.cloud.config.discovery.serviceId：配置中心服务id eureka.client.serviceUrl.defaultZone：配置eureka服务器地址 123456789101112131415161718server: port: 8881spring: application: name: config-client cloud: config: uri: http://localhost:8888/ # 配置服务中心地址 label: master # 远程仓库分支 profile: dev # 指定环境 discovery: enabled: true # 从配置中心读取文件 service-id: config-server # 配置中心服务ideureka: client: serviceUrl: defaultZone: http://localhost:8889/eureka/ # 配置eureka服务器地址 3.依次启动 eureka-server、config-server、config-client 模块，访问 http://localhost:8889/ 访问 http://localhost:8881/hi ，结果： 说明从配置中心获取到配置数据。 本文源码下载地址：https://github.com/laravelshao/spring-cloud-learning/tree/master/setion06-config-cluster 参考资料Spring Cloud Config 史上最简单的SpringCloud教程","categories":[{"name":"Spring Cloud","slug":"Spring-Cloud","permalink":"http://laravelshao.com/categories/Spring-Cloud/"}],"tags":[{"name":"Spring","slug":"Spring","permalink":"http://laravelshao.com/tags/Spring/"},{"name":"Spring Cloud","slug":"Spring-Cloud","permalink":"http://laravelshao.com/tags/Spring-Cloud/"},{"name":"微服务","slug":"微服务","permalink":"http://laravelshao.com/tags/微服务/"},{"name":"Cluster","slug":"Cluster","permalink":"http://laravelshao.com/tags/Cluster/"},{"name":"配置中心","slug":"配置中心","permalink":"http://laravelshao.com/tags/配置中心/"},{"name":"集群","slug":"集群","permalink":"http://laravelshao.com/tags/集群/"}]},{"title":"Spring Cloud学习：05分布式配置中心（Spring Cloud Config）","slug":"spring-cloud-learning-05-config","date":"2018-01-09T10:49:10.000Z","updated":"2018-01-09T11:04:13.400Z","comments":true,"path":"2018/01/09/spring-cloud-learning-05-config/","link":"","permalink":"http://laravelshao.com/2018/01/09/spring-cloud-learning-05-config/","excerpt":"","text":"配置中心介绍Spring Cloud Config 是 Spring Cloud 团队创建的一个全新项目，用来为分布式系统中的基础设施和微服务应用提供集中化的外部配置支持，它分为服务端与客户端两个部分。其中服务端也称为分布式配置中心，它是一个独立的微服务应用，用来连接配置仓库并为客户端提供获取配置信息、加密/解密信息等访问接口；而客户端则是微服务架构中的各个微服务应用或基础设施，它们通过指定的配置中心来管理应用资源与业务相关的配置内容，并在启动的时候从配置中心获取和加载配置信息。Spring Cloud Config 实现了对服务端和客户端中环境变量和属性配置的抽象映射，所以它除了适用于 Spring 构建的应用程序之外，也可以在任何其他语言运行的应用程序中使用。由于 Spring Cloud Config 实现的配置中心默认采用 Git 来存储配置信息，所以使用 Spring Cloud Config 构建的配置服务器，天然就支持对微服务应用配置信息的版本管理，并且可以通过 Git 客户端工具来方便的管理和访问配置内容。当然它也提供了对其他存储方式的支持，比如：SVN 仓库、本地化文件系统。 Config Client 是 Config Server 的客户端，用于操作存储在 Config Server 中的配置内容。微服务在启动时会请求 Config Server 获取配置文件的内容，请求到后再启动容器。 创建配置中心（Config Server）1.创建空的 maven 项目，添加模块 config-server，选择 Spring Initializr-&gt;Cloud Config-&gt;Config Server，添加以下依赖配置：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.laravelshao.springcloud&lt;/groupId&gt; &lt;artifactId&gt;config-server&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;name&gt;config-server&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;1.5.8.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;spring-cloud.version&gt;Dalston.SR4&lt;/spring-cloud.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-config-server&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/dependencyManagement&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; 2.启动类添加@EnableConfigServer 注解开启配置服务器功能12345678@SpringBootApplication@EnableConfigServerpublic class ConfigServerApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(ConfigServerApplication.class, args); &#125;&#125; 3.添加配置服务中心配置 12345678910111213141516server: port: 8888spring: application: name: config-server # 配置中心 cloud: config: server: git: uri: https://github.com/laravelshao/spring-cloud-config-repo.git # cloud配置仓库地址 search-paths: spring-cloud-learning # 配置仓库路径 username: # 公开仓库可不填写 password: # 公开仓库可不填写 label: master # 配置仓库分支 在配置仓库 https://github.com/laravelshao/spring-cloud-config-repo 中 spring-cloud-learning 文件夹下添加文件 config-client-dev.properties，并添加数据： hello = hello config server 4.启动配置中心，访问 http://localhost:8888/hello/dev 创建配置客户端（Config Client）1.添加模块 config-client，选择 Spring Initializr-&gt;Cloud Config-&gt;Config Client，并添加以下依赖配置：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465&lt;?xml version=”1.0” encoding=”UTF-8”?&gt;&lt;project xmlns=”http://maven.apache.org/POM/4.0.0” xmlns:xsi=”http://www.w3.org/2001/XMLSchema-instance” xsi:schemaLocation=”http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd”&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.laravelshao.springcloud&lt;/groupId&gt; &lt;artifactId&gt;config-client&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;name&gt;config-client&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;1.5.8.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!—lookup parent from repository  &lt;/parent&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;spring-cloud.version&gt;Dalston.SR4&lt;/spring-cloud.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/dependencyManagement&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; 2.添加 bootstrap.yml 配置文件1234567891011server: port: 8881spring: application: name: config-client cloud: config: uri: http://localhost:8888/ # 配置服务中心地址 label: master # 远程仓库分支 profile: dev # 指定环境 3.添加一个接口读取配置中心读取数据12345678910111213141516@SpringBootApplication@RestControllerpublic class ConfigClientApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(ConfigClientApplication.class, args); &#125; @Value(\"$&#123;hello&#125;\") String hello; @RequestMapping(\"/hi\") public String hi() &#123; return hello; &#125;&#125; 4.启动config-server、config-client，浏览器请求 http://localhost:8881/hi 说明 config-client 从 config-server 获取数据，config-server 从 git 仓库获取数据，结构如下： 本文源码下载地址：https://github.com/laravelshao/spring-cloud-learning/tree/master/setion05-config 参考资料Spring Cloud Config 中文文档","categories":[{"name":"Spring Cloud","slug":"Spring-Cloud","permalink":"http://laravelshao.com/categories/Spring-Cloud/"}],"tags":[{"name":"Spring","slug":"Spring","permalink":"http://laravelshao.com/tags/Spring/"},{"name":"Spring Cloud","slug":"Spring-Cloud","permalink":"http://laravelshao.com/tags/Spring-Cloud/"},{"name":"微服务","slug":"微服务","permalink":"http://laravelshao.com/tags/微服务/"},{"name":"配置中心","slug":"配置中心","permalink":"http://laravelshao.com/tags/配置中心/"}]},{"title":"Spring Cloud学习：04路由网关（Zuul）","slug":"spring-cloud-learning-04-zuul","date":"2018-01-08T02:51:46.000Z","updated":"2018-01-08T03:21:36.765Z","comments":true,"path":"2018/01/08/spring-cloud-learning-04-zuul/","link":"","permalink":"http://laravelshao.com/2018/01/08/spring-cloud-learning-04-zuul/","excerpt":"","text":"Zuul介绍通过前几个核心组件，可以构建一个简略（不完善）的微服务架构。 在该架构中，我们的服务集群包含：内部服务 Service A 和 Service B ，他们都会注册与订阅服务至 Eureka Server，而 Open Service 是一个对外的服务，通过均衡负载公开至服务调用方。 当前架构存在的不足： 首先，破坏了服务无状态特点。为了保证对外服务的安全性，我们需要实现对服务访问的权限控制，而开放服务的权限控制机制将会贯穿并污染整个开放服务的业务逻辑，这会带来的最直接问题是，破坏了服务集群中 REST API 无状态的特点。从具体开发和测试的角度来说，在工作中除了要考虑实际的业务逻辑之外，还需要额外可续对接口访问的控制处理。 其次，无法直接复用既有接口。当我们需要对一个即有的集群内访问接口，实现外部服务访问时，我们不得不通过在原有接口上增加校验逻辑，或增加一个代理调用来实现权限控制，无法直接复用原有的接口。 解决思路： 需要将权限控制这样的东西从我们的服务单元中抽离出去，而最适合这些逻辑的地方就是处于对外访问最前端的地方，我们需要一个更强大一些的均衡负载器，也就是服务网关。 服务网关是微服务架构中一个不可或缺的部分。通过服务网关统一向外系统提供 REST API 的过程中，除了具备服务路由、均衡负载功能之外，它还具备了权限控制等功能。Spring Cloud Netflix 中的 Zuul 就担任了这样的一个角色，为微服务架构提供了前门保护的作用，同时将权限控制这些较重的非业务逻辑内容迁移到服务路由层面，使得服务集群主体能够具备更高的可复用性和可测试性。 Zuul路由测试1.基于之前工程，创建新模块 zuul-service，选择 Spring Initializr-&gt;Cloud Discovery-&gt;Eureka Discovery，并添加以下依赖：12345678910111213141516171819&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-zuul&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt;&lt;/dependencies&gt; 2.启动类上添加@EnableZuulProxy开启Zuul功能12345678@SpringBootApplication@EnableZuulProxypublic class ZuulServiceApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(ZuulServiceApplication.class, args); &#125;&#125; 3.配置文件添加相关配置，配置服务端口为8769，应用名称为 zuul-service；配置以/api-ribbon-service/开头的请求转发到 ribbion-service 服务，以/api-feign-service/开头的请求转发到 feign-service 服务。1234567891011121314151617181920server: port: 8769eureka: client: serviceUrl: defaultZone: http://localhost:8761/eureka/spring: application: name: zuul-service #指明应用名称（服务与服务相互调用根据name属性）zuul: routes: api-a: path: /api-ribbon-service/** serviceId: ribbon-service api-b: path: /api-feign-service/** serviceId: feign-service 4.依次启动服务注册中心、one-service、ribbon-service、feign-service、zuul-service 浏览器请求 http://localhost:8769/api-ribbon-service/one 结果： 浏览器请求 http://localhost:8769/api-feign-service/one 结果： 说明 zuul 起到了路由功能。 Zuul服务过滤测试添加自定义的授权过滤器，继承 ZuulFilter12345678910111213141516171819202122232425262728293031323334353637383940@Componentpublic class MyAuthFilter extends ZuulFilter &#123; private static final Logger LOGGER = LoggerFactory.getLogger(MyAuthFilter.class); @Override public String filterType() &#123; return \"pre\"; &#125; @Override public int filterOrder() &#123; return 0; &#125; @Override public boolean shouldFilter() &#123; return true; &#125; @Override public Object run() &#123; RequestContext context = RequestContext.getCurrentContext(); HttpServletRequest request = context.getRequest(); LOGGER.info(\"&#123;&#125;---&gt;&#123;&#125;\", request.getMethod(), request.getRequestURL().toString()); Object token = request.getParameter(\"token\"); if (token == null) &#123; LOGGER.info(\"token is empty\"); context.setSendZuulResponse(false); context.setResponseStatusCode(401); try &#123; context.getResponse().getWriter().write(\"token is empty\"); &#125; catch (Exception e) &#123; &#125; return null; &#125; LOGGER.info(\"ok\"); return null; &#125;&#125; ① filterType定义： PRE 路由前 ROUTING 路由中 POST 路由后 ERROR 发生错误调用 Zuul Request Lifecycle ② filterOrder：过滤顺序 ③ shouldFilter：是否需要过滤，返回boolean值 ④ run：过滤逻辑 浏览器访问 http://localhost:8769/api-feign-service/one 结果： 添加token参数请求 http://localhost:8769/api-feign-service/one?token=haha 结果： 本文源码下载地址：https://github.com/laravelshao/spring-cloud-learning/tree/master/setion04-zuul 参考资料Spring Cloud构建微服务架构：服务网关（基础） Spring-&gt;Router and Filter: Zuul GitHub-&gt;Netflix Zuul Filter 史上最简单的SpringCloud教程","categories":[{"name":"Spring Cloud","slug":"Spring-Cloud","permalink":"http://laravelshao.com/categories/Spring-Cloud/"}],"tags":[{"name":"Spring","slug":"Spring","permalink":"http://laravelshao.com/tags/Spring/"},{"name":"Spring Cloud","slug":"Spring-Cloud","permalink":"http://laravelshao.com/tags/Spring-Cloud/"},{"name":"微服务","slug":"微服务","permalink":"http://laravelshao.com/tags/微服务/"},{"name":"Zuul","slug":"Zuul","permalink":"http://laravelshao.com/tags/Zuul/"},{"name":"路由网关","slug":"路由网关","permalink":"http://laravelshao.com/tags/路由网关/"}]},{"title":"Spring Cloud学习：03断路器（Hystrix）","slug":"spring-cloud-learning-03-hystrix","date":"2018-01-07T07:33:51.000Z","updated":"2018-01-08T03:09:51.872Z","comments":true,"path":"2018/01/07/spring-cloud-learning-03-hystrix/","link":"","permalink":"http://laravelshao.com/2018/01/07/spring-cloud-learning-03-hystrix/","excerpt":"","text":"Hystrix介绍Spring Cloud Hystrix是分布式系统处理超时和错误的机制，如下图所示，分布式系统中某个用户请求依赖A、H、I、P服务。 当此请求并发超过50的时候，服务I处理速度变慢，但是服务I还是被调用。 大量请求会阻塞在 Tomcat 服务器上，影响其它整个服务。在复杂的分布式架构的应用程序有很多的依赖，都会不可避免地在某些时候失败。高并发的依赖失败时如果没有隔离措施，当前应用服务就有被拖垮的风险。 Spring Cloud Hystrix 就是隔离措施的一种实现，可以设置在某种超时或者失败情形下断开依赖调用或者返回指定逻辑，从而提高分布式系统的稳定性。 测试HystrixRibbon使用Hystrix1.改造ribbon-service模块，在pom.xml文件中添加spring-cloud-starter-hystrix起步依赖：1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-hystrix&lt;/artifactId&gt;&lt;/dependency&gt; 2.在启动类上添加@EnableHystrix注解开启Hystrix断路器功能123456789101112131415@SpringBootApplication@EnableDiscoveryClient@EnableHystrixpublic class RibbonServiceApplication &#123; @Bean @LoadBalanced public RestTemplate restTemplate() &#123; return new RestTemplate(); &#125; public static void main(String[] args) &#123; SpringApplication.run(RibbonServiceApplication.class, args); &#125;&#125; 3.在测试接口上添加@HystrixCommand注解为该方法添加断路器功能，使用fallbackMethod参数指定服务异常时的熔断方法，同时添加一个服务异常时调用的方法。123456789101112131415161718192021@RestControllerpublic class DemoController &#123; @Autowired RestTemplate restTemplate; @RequestMapping(\"/one\") @HystrixCommand(fallbackMethod = \"serviceError\") public String one()&#123; return restTemplate.getForObject(\"http://ONE-SERVICE/one\",String.class); &#125; /** *服务异常调用方法 * @return */ public String serviceError()&#123; return \"service has error...\"; &#125;&#125; 4.启动服务注册中心、one-service、ribbon-service，服务正常时访问 http://localhost:8764/one 显示： 关闭one-service服务，访问 http://localhost:8764/one 显示： Feign使用Hystrix1.Feign已经包含断路器功能，但默认未打开，可以在YML配置文件中配置打开：123456789101112131415server: port: 8765eureka: client: serviceUrl: defaultZone: http://localhost:8761/eureka/spring: application: name: feign-service #指明应用名称（服务与服务相互调用根据name属性）feign: hystrix: enabled: true #开启feign断路器功能 2.添加Feign接口断路器类，必须实现Feign接口12345678@Componentpublic class FeignDemoServiceHystrix implements FeignDemoService &#123; @Override public String invocateOneService() &#123; return \"feign service has error...\"; &#125;&#125; 3.在Feign接口的@FeignClient注解上添加fallback参数指定断路器类123456@FeignClient(value = \"one-service\", fallback = FeignDemoServiceHystrix.class)public interface FeignDemoService &#123; @RequestMapping(value = \"/one\", method = RequestMethod.GET) String invocateOneService();&#125; 4.启动服务注册中心、one-service、feign-service，服务正常时访问 http://localhost:8765/one 显示： 关闭one-service服务，访问http://localhost:8765/one 显示： Hystrix Dashboard改造ribbon-service模块，添加断路器仪表盘功能 1.在pom.xml中添加起步依赖：12345678&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-hystrix-dashboard&lt;/artifactId&gt;&lt;/dependency&gt; 2.在启动类上添加@EnableHystrixDashboard注解开启断路器仪表盘功能12345678910111213141516@SpringBootApplication@EnableDiscoveryClient@EnableHystrix@EnableHystrixDashboardpublic class RibbonServiceApplication &#123; @Bean @LoadBalanced public RestTemplate restTemplate() &#123; return new RestTemplate(); &#125; public static void main(String[] args) &#123; SpringApplication.run(RibbonServiceApplication.class, args); &#125;&#125; 3.访问 http://localhost:8764/hystrix 如下图： 参数解释： Delay：该参数用来控制服务器上轮询监控信息的延迟时间，默认为2000毫秒，我们可以通过配置该属性来降低客户端的网络和CPU消耗。 Title：该参数对应了Monitor Stream监控页面Hystrix Stream之后的内容，默认会使用具体监控实例的URL，我们可以通过配置该信息来展示更合适的标题。 4.点击Monitor Stream按钮，并请求http://localhost:8764/one，可以查看到监控数据： 本文源码下载地址：https://github.com/laravelshao/spring-cloud-learning/tree/master/setion03-hystrix 参考资料Spring-&gt;How to Include Hystrix GitHub-&gt;Netflix Hystrix 史上最简单的SpringCloud教程 Spring Cloud基础教程","categories":[{"name":"Spring Cloud","slug":"Spring-Cloud","permalink":"http://laravelshao.com/categories/Spring-Cloud/"}],"tags":[{"name":"Spring","slug":"Spring","permalink":"http://laravelshao.com/tags/Spring/"},{"name":"Spring Cloud","slug":"Spring-Cloud","permalink":"http://laravelshao.com/tags/Spring-Cloud/"},{"name":"微服务","slug":"微服务","permalink":"http://laravelshao.com/tags/微服务/"},{"name":"Hystrix","slug":"Hystrix","permalink":"http://laravelshao.com/tags/Hystrix/"}]},{"title":"Spring Cloud学习：02服务消费者（Ribbon&Feign）","slug":"spring-cloud-learning-02-ribbon-feign","date":"2018-01-07T06:23:56.000Z","updated":"2018-01-07T08:24:30.468Z","comments":true,"path":"2018/01/07/spring-cloud-learning-02-ribbon-feign/","link":"","permalink":"http://laravelshao.com/2018/01/07/spring-cloud-learning-02-ribbon-feign/","excerpt":"","text":"在微服务架构中，业务会拆分成一个独立的服务，服务与服务之间基于http restful进行通信。Spring Cloud有两种服务调用方式，一种是Ribbon+restTemplate，另一种是Feign。 Ribbon+restTemplateRibbon介绍Spring Cloud Ribbon 是基于 HTTP 和 TCP 的客户端负载均衡工具，基于 Netflix Ribbon 实现。通过 Spring Cloud 封装，可以方便地将面向服务的REST模板请求自动转换成客户端负载均衡的服务调用。包括下面的 Feign 调用，也是基于 Ribbon 实现的。基于 Spring Cloud Ribbon 的封装，使用客户端负载均衡调用服务非常简单，只需实现两步： ①服务提供者只需启动多个服务实例并注册到一个注册中心或多个相关联的服务注册中心。 ②服务消费者直接通过调用被@LoadBalanced 注解（开启客户端负载均衡）的 RestTemplate 实现面向服务的接口调用。 测试Ribbon+restTemplate方式调用1.创建服务提供方（Eureka Client） 基于之前工程，创建新模块ribbon-service，选择Spring Initializr-&gt;Cloud Discovery-&gt;Eureka Discovery，并添加以下依赖：12345678910111213141516171819&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-ribbon&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt;&lt;/dependencies&gt; 2.添加服务提供方配置文件1234567891011server: port: 8764eureka: client: serviceUrl: defaultZone: http://localhost:8761/eureka/spring: application: name: ribbon-service #指明应用名称（服务与服务相互调用根据name属性） 3.启动类中添加初始化RestTemplate，用于发起REST请求，使用@LoadBalanced注解开启负载均衡。1234567891011121314@SpringBootApplication@EnableDiscoveryClientpublic class RibbonServiceApplication &#123; @Bean @LoadBalanced public RestTemplate restTemplate() &#123; return new RestTemplate(); &#125; public static void main(String[] args) &#123; SpringApplication.run(RibbonServiceApplication.class, args); &#125;&#125; 4.创建一个接口消费Eureka Client提供的接口：123456789101112@RestControllerpublic class DemoController &#123; @Autowired RestTemplate restTemplate; @RequestMapping(\"/one\") public String one()&#123; return restTemplate.getForObject(\"http://ONE-SERVICE/one\",String.class); &#125;&#125; 5.启动工程 ①启动服务注册中心 eureka-server 工程； ②启动 one-service 工程，当前端口为8762，修改端口为8763，再次启动一个实例（如使用 IDEA，在 Edit Configurations 中指定应用中去除勾选 Single instance only，否则请求时会出现以下错误），启动完成后，one-service 拥有2个服务实例； ③启动ribbon-service工程，端口为8764。 6.浏览器多次访问 http://localhost:8764/one，交替出现以下内容，说明负载均衡访问不同端口的服务实例。 12one-service test port:8762one-service test port:8763 FeignFeign介绍Spring Cloud Feign 是一套基于 Netflix Feign 实现的声明式服务调用客户端。它使得编写 Web 服务客户端变得更加简单。我们只需要通过创建接口并用注解来配置它既可完成对 Web 服务接口的绑定。它具备可插拔的注解支持，包括 Feign 注解、JAX-RS 注解。它也支持可插拔的编码器和解码器。Spring Cloud Feign 还扩展了对 Spring MVC 注解的支持，同时还整合了 Ribbon 和 Eureka 来提供均衡负载的 HTTP 客户端实现。 分布式应用早在十几年前就开始出现，各自的应用运行在各自的 tomcat，jboss 一类的容器中，他们之间的相互调用变成了一种远程调用，而实现远程调用的方式很多。按照协议划分，可以有 RPC，Webservice，http。不同的框架也对他们有了各自的实现，如 dubbo(x)，motan 就都是 RPC 框架，本文所要讲解的 Feign 便可以理解为一种 http 框架，用于分布式服务之间通过 Http 进行接口交互。说他是框架，有点过了，可以理解为一个 http 工具，只不过在 spring cloud 全家桶的体系中，它比 httpclient，okhttp，retrofit 这些 http 工具都要强大的多。 测试Feign方式调用1.创建Feign方式的服务提供方 基于先前工程创建新模块feign-service，选择Spring Initializr-&gt;Cloud Discovery-&gt;Eureka Discovery，并添加以下依赖：12345678910111213141516171819&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-feign&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt;&lt;/dependencies&gt; 2.添加服务提供方配置信息1234567891011server: port: 8765eureka: client: serviceUrl: defaultZone: http://localhost:8761/eureka/spring: application: name: feign-service #指明应用名称（服务与服务相互调用根据name属性） 3.启动类添加@EnableFeignClients注解开启Feign功能123456789@SpringBootApplication@EnableDiscoveryClient@EnableFeignClientspublic class FeignServiceApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(FeignServiceApplication.class, args); &#125;&#125; 4.定义一个Feign接口，使用@FeignClient (“服务名称”)调用指定服务，调用one-service服务的”/one”接口：12345@FeignClient(\"one-service\")public interface FeignDemoService &#123; @RequestMapping(value = \"/one\", method = RequestMethod.GET) String invocateOneService(); 5.添加测试接口1234567891011@RestControllerpublic class FeignDemoController &#123; @Autowired FeignDemoService feignDemoService; @RequestMapping(\"/one\") public String one() &#123; return feignDemoService.invocateOneService(); &#125;&#125; 6.启动工程 ①启动服务注册中心eureka-server工程； ②启动one-service 2个服务实例，端口分别为8762和 8763； ③启动feign-service工程，端口为8765。 7.浏览器多次访问 http://localhost:8765/one，交替出现以下内容：12one-service test port:8762one-service test port:8763 本文源码下载地址：https://github.com/laravelshao/spring-cloud-learning/tree/master/setion02-ribbon-feign 参考资料Spring RestTemplate as a Load Balancer Client How to Include Feign 史上最简单的SpringCloud教程 Spring Cloud基础教程 &amp; Spring Cloud微服务实战","categories":[{"name":"Spring Cloud","slug":"Spring-Cloud","permalink":"http://laravelshao.com/categories/Spring-Cloud/"}],"tags":[{"name":"Spring","slug":"Spring","permalink":"http://laravelshao.com/tags/Spring/"},{"name":"Spring Cloud","slug":"Spring-Cloud","permalink":"http://laravelshao.com/tags/Spring-Cloud/"},{"name":"Ribbon","slug":"Ribbon","permalink":"http://laravelshao.com/tags/Ribbon/"},{"name":"Feign","slug":"Feign","permalink":"http://laravelshao.com/tags/Feign/"},{"name":"微服务","slug":"微服务","permalink":"http://laravelshao.com/tags/微服务/"}]},{"title":"Spring Cloud学习：01服务注册及发现（Eureka）","slug":"spring-cloud-learning-01-eureka","date":"2018-01-06T10:25:09.000Z","updated":"2018-01-28T10:28:32.018Z","comments":true,"path":"2018/01/06/spring-cloud-learning-01-eureka/","link":"","permalink":"http://laravelshao.com/2018/01/06/spring-cloud-learning-01-eureka/","excerpt":"","text":"Spring Cloud 是一个基于 Spring Boot 实现的云应用开发工具，它为基于 JVM 的云应用开发中的配置管理、服务发现、断路器、智能路由、微代理、控制总线、全局锁、决 策竞选、分布式会话和集群状态管理等操作提供了一种简单的开发方式。 对于服务注册和发现会用到 Spring Cloud Netflix，该项目是 Spring Cloud 的子项目之一，主要内容是对 Netflix 公司一系列开源产品的包装，它为 Spring Boot 应用提供了自配置的 Netflix OSS 整合。通过一些简单的注解，开发者就可以快速的在应用中配置一下常用模块并构建庞大的分布式系统。它主要提供的模块包括：服务发现（Eureka），断路器（Hystrix），智能路有（Zuul），客户端负载均衡（Ribbon）等。 先来学习下它的核心模块服务发现模块：Eureka，尝试搭建 Eureka Server（服务注册中心）及 Eureka Client（服务提供方）。 创建服务注册中心（Eureka Server）1.创建一个空的 maven 工程，添加 Module，使用 Spring Initializr，选择 Cloud Discovery-&gt;Eureka Server创建。 创建完成后的pom.xml： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.laravelshao.springcloud&lt;/groupId&gt; &lt;artifactId&gt;eureka-server&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;name&gt;eureka-server&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;1.5.6.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;spring-cloud.version&gt;Dalston.SR3&lt;/spring-cloud.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-eureka-server&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/dependencyManagement&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; 2.使用@EnableEurekaServer 注解启用服务注册中心。 12345678@EnableEurekaServer@SpringBootApplicationpublic class EurekaServerApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(EurekaServerApplication.class, args); &#125;&#125; 3.同时还必须添加 Eureka Server 的配置信息，这里可以参考 Spring Cloud 参考文档中的配置。 123456789101112server: port: 8761 # eureka默认端口：8761eureka: instance: hostname: localhost client: register-with-eureka: false # 是否注册到eureka fetch-registry: false # 是否从eureka获取注册信息 serviceUrl: # eureka服务器地址（注意：地址最后面的 /eureka/ 是固定值） defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/ 4.访问 Eureka Server，还没有发现服务，因为还没注册服务。 创建服务提供方（Eureka Client）1.创建服务提供方类似创建 Server，选择 Spring Initializr-&gt;Cloud Discovery-&gt;Eureka Discovery。创建后pom.xml如下：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.laravelshao.springcloud&lt;/groupId&gt; &lt;artifactId&gt;one-service&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;name&gt;one-service&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;1.5.6.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;spring-cloud.version&gt;Dalston.SR3&lt;/spring-cloud.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/dependencyManagement&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; 2.使用@EnableEurekaClient 注解表明是一个 Eureka Client。 12345678@EnableEurekaClient@SpringBootApplicationpublic class OneServiceApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(OneServiceApplication.class, args); &#125;&#125; 3.添加 Eureka Client 配置信息。 1234567891011server: port: 8762eureka: client: serviceUrl: defaultZone: http://localhost:8761/eureka/spring: application: name: one-service #指明应用名称（服务与服务相互调用根据name属性） 4.启动工程，打开注册服务中心，发现已经存在一个服务。 可以使用浏览器访问 http://localhost:8762/one，返回测试信息。 本文源码下载地址：https://github.com/laravelshao/spring-cloud-learning/tree/master/setion01-eureka","categories":[{"name":"Spring Cloud","slug":"Spring-Cloud","permalink":"http://laravelshao.com/categories/Spring-Cloud/"}],"tags":[{"name":"Spring","slug":"Spring","permalink":"http://laravelshao.com/tags/Spring/"},{"name":"Spring Cloud","slug":"Spring-Cloud","permalink":"http://laravelshao.com/tags/Spring-Cloud/"},{"name":"微服务","slug":"微服务","permalink":"http://laravelshao.com/tags/微服务/"},{"name":"Eureka","slug":"Eureka","permalink":"http://laravelshao.com/tags/Eureka/"}]}]}